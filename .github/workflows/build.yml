name: local import-map-deployer build
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CONTAINER_TAG: import-map-deployer
  FILE_NAME: import-map-deployer.cid

jobs:
  build:
    name: IMD
    runs-on: [self-hosted, linux, X64]
    steps:
      - uses: actions/checkout@v3

      - name: reading running container id
        id: container-id
        run: |
          FILE="/$HOME/docker-containers-id/$FILE_NAME"
          if [ -f "$FILE" ]; then
            ID=`cat $FILE`
            echo "id=$ID" >> $GITHUB_OUTPUT
          fi

      - name: copying essential files from container
        run: |
          DIR="$HOME/docker-buffer/$CONTAINER_TAG"
          if [ ! -z "${{steps.container-id.outputs.id}}" ]; then
            DIRECTORY_CHECK=`docker exec ${{steps.container-id.outputs.id}} [ -d /app/importmaps ] && echo 1 || echo 0`
            
            if [ "$DIRECTORY_CHECK" -eq 1 ]; then
              mkdir $DIR
              docker cp ${{steps.container-id.outputs.id}}:/app/importmaps "$DIR/"
            fi
          fi

      - name: stopping container, deleting file
        run: |
          FILE="/$HOME/docker-containers-id/$FILE_NAME"
          if [ ! -z "${{steps.container-id.outputs.id}}" ]; then
            rm $FILE
            docker stop ${{steps.container-id.outputs.id}}
          fi

      - name: remove previous docker image
        run: docker rmi -f $CONTAINER_TAG

      - name: build docker image
        run: docker build . -t $CONTAINER_TAG

      - name: run docker container and save id
        run: |
          FILE="/$HOME/docker-containers-id/$FILE_NAME"
          docker run --cidfile $FILE -d -p 5000:5000 $CONTAINER_TAG

      - name: copying essential files to container
        run: |
          DIR="$HOME/docker-buffer/$CONTAINER_TAG"
          if [ -d "$DIR" ]; then
            DIRECTORY_CHECK=`docker exec ${{steps.container-id.outputs.id}} [ -d /app ] && echo 1 || echo 0`

            if [ "$DIRECTORY_CHECK" -eq 1 ]; then
              docker cp "$DIR/importmaps" ${{steps.container-id.outputs.id}}:/app/ 
              rm -r $DIR
            fi
          fi
